import ml
import math

#ml.report_progress = True

program.options_from_args()

approx = 3

if 'profile' in program.args:
    print('Compiling for profiling')
    N = 1000
    n_test = 1000
elif 'debug' in program.args:
    N = 10
    n_test = 10
elif 'gisette' in program.args:
    print('Compiling for 4/9')
    N = 11791
    n_test = 1991
else:
    N = 12665
    n_test = 2115

n_examples = N
n_features = 28 ** 2

try:
    n_epochs = int(program.args[1])
except:
    n_epochs = 100

try:
    batch_size = int(program.args[2])
except:
    batch_size = N

assert batch_size <= N

try:
    ml.set_n_threads(int(program.args[3]))
except:
    pass

layers = [
    ml.FixConv2d([N, 28, 28, 1], (5, 5, 5, 1), (5,), [N, 14, 14, 5], (2, 2)),
    ml.Relu([N, 14, 14, 5]),
    ml.Dense(N, 980, 1),
    ml.Output(N, approx=approx)]

layers[-1].Y.input_from(0)
layers[0].X.input_from(0)

Y = sint.Array(n_test)
X = sfix.Matrix(n_test, n_features)
Y.input_from(0)
X.input_from(0)

sgd = ml.SGD(layers, 1, report_loss=True)
sgd.run_by_args(program, n_epochs, batch_size, X, Y)
